{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 127, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Prana/prana_client/src/app/components/Call.jsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useVoice } from \"@humeai/voice-react\";\r\n\r\nexport function Call() {\r\n  const { connect, disconnect, status } = useVoice();\r\n\r\n  const handleClick = () => {\r\n    if (status.value === \"connected\") {\r\n      disconnect();\r\n    } else {\r\n      try {\r\n        connect();\r\n      } catch (error) {\r\n        console.log(\"Error connecting:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex items-end justify-center\">\r\n      <button\r\n        disabled={status.value === \"connecting\"}\r\n        onClick={handleClick}\r\n        className=\"btn btn-wide bg-slate-100 hover:bg-slate-100\"\r\n        style={{\r\n          color: \"black\",\r\n          position: \"absolute\", \r\n          bottom: \"20px\", \r\n        }}\r\n      >\r\n        {status.value === \"connected\" ? \"End Call\" : \"Start Call\"}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAIO,SAAS;IACd,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,GAAG,CAAA,GAAA,4JAAA,CAAA,WAAQ,AAAD;IAE/C,MAAM,cAAc;QAClB,IAAI,OAAO,KAAK,KAAK,aAAa;YAChC;QACF,OAAO;YACL,IAAI;gBACF;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,GAAG,CAAC,qBAAqB;YACnC;QACF;IACF;IAEA,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YACC,UAAU,OAAO,KAAK,KAAK;YAC3B,SAAS;YACT,WAAU;YACV,OAAO;gBACL,OAAO;gBACP,UAAU;gBACV,QAAQ;YACV;sBAEC,OAAO,KAAK,KAAK,cAAc,aAAa;;;;;;;;;;;AAIrD"}},
    {"offset": {"line": 171, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 177, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Prana/prana_client/src/app/components/Message.jsx"],"sourcesContent":["\"use client\";\r\nimport { useVoice } from \"@humeai/voice-react\";\r\nimport { useEffect, useRef } from \"react\";\r\n\r\nexport default function Messages() {\r\n  const { messages } = useVoice();\r\n  const messagesEndRef = useRef(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  return (\r\n    <div className=\"w-full flex justify-center\">\r\n      <div className=\"w-full max-w-2xl mx-4\">\r\n        <div className=\"h-[calc(95vh-8rem)] overflow-y-auto p-4 bg-slate-800/50 backdrop-blur-sm rounded-lg shadow-xl border border-slate-700/30\">\r\n          {\" \"}\r\n          {messages.length === 0 && (\r\n            <p className=\"text-center mt-8 text-slate-100\">\r\n              Press Start Call to start the conversation With Prana-Bot!!\r\n            </p>\r\n          )}\r\n          {messages.map((msg, index) => {\r\n            if (msg.type !== \"user_message\" && msg.type !== \"assistant_message\")\r\n              return null;\r\n\r\n            const { role, content } = msg.message;\r\n            return (\r\n              <div\r\n                key={msg.type + index}\r\n                className={`mb-1 ${\r\n                  role === \"assistant\" ? \"justify-start\" : \"justify-end\"\r\n                } flex`}\r\n              >\r\n                <div\r\n                  className={`chat-bubble max-w-[80%] break-words ${\r\n                    role === \"assistant\"\r\n                      ? \"bg-base-200 text-primary\"\r\n                      : \"bg-primary text-white\"\r\n                  }`}\r\n                >\r\n                  {content}\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n          <div ref={messagesEndRef} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AACA;AACA;AAFA;;;;AAIe,SAAS;IACtB,MAAM,EAAE,QAAQ,EAAE,GAAG,CAAA,GAAA,4JAAA,CAAA,WAAQ,AAAD;IAC5B,MAAM,iBAAiB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAE;IAE9B,MAAM,iBAAiB;QACrB,eAAe,OAAO,EAAE,eAAe;YAAE,UAAU;QAAS;IAC9D;IAEA,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR;IACF,GAAG;QAAC;KAAS;IAEb,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAI,WAAU;sBACb,cAAA,8OAAC;gBAAI,WAAU;;oBACZ;oBACA,SAAS,MAAM,KAAK,mBACnB,8OAAC;wBAAE,WAAU;kCAAkC;;;;;;oBAIhD,SAAS,GAAG,CAAC,CAAC,KAAK;wBAClB,IAAI,IAAI,IAAI,KAAK,kBAAkB,IAAI,IAAI,KAAK,qBAC9C,OAAO;wBAET,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,IAAI,OAAO;wBACrC,qBACE,8OAAC;4BAEC,WAAW,CAAC,KAAK,EACf,SAAS,cAAc,kBAAkB,cAC1C,KAAK,CAAC;sCAEP,cAAA,8OAAC;gCACC,WAAW,CAAC,oCAAoC,EAC9C,SAAS,cACL,6BACA,yBACJ;0CAED;;;;;;2BAZE,IAAI,IAAI,GAAG;;;;;oBAgBtB;kCACA,8OAAC;wBAAI,KAAK;;;;;;;;;;;;;;;;;;;;;;AAKpB"}},
    {"offset": {"line": 259, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 265, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Prana/prana_client/src/app/Cosine.js"],"sourcesContent":["\"use server\";\r\n\r\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\r\nimport OpenAI from \"openai\";\r\n\r\nconst collection = \"test\";\r\n\r\nconst openai = new OpenAI({\r\n  apiKey: process.env.OPENAI_API_KEY,\r\n});\r\n\r\nconst client = new QdrantClient({\r\n  url: process.env.QDRANT_URL,\r\n  apiKey: process.env.QDRANT_API_KEY,\r\n});\r\n\r\nexport async function Cosine(data) {\r\n  console.log(\"Cosine function called with data:\", data);\r\n  try {\r\n    const { userText } = data;\r\n    console.log(\"User text:\", userText);\r\n\r\n    const embeddingResponse = await openai.embeddings.create({\r\n      model: \"text-embedding-3-large\",\r\n      input: userText,\r\n    });\r\n    console.log(\"Embedding response:\", embeddingResponse);\r\n\r\n    const queryEmbedding = embeddingResponse.data[0].embedding;\r\n    console.log(\"Query embedding:\", queryEmbedding);\r\n\r\n    // Perform similarity search using Qdrant\r\n    const results = await client.search(collection, {\r\n      vector: queryEmbedding,\r\n      limit: 3,\r\n    });\r\n    console.log(\"Search results:\", results);\r\n\r\n    const responseData = results.map(\r\n      (obj, i) => `${(i + 1).toString()}. ${obj.payload.page_content}`\r\n    );\r\n    console.log(\"Response data:\", responseData);\r\n\r\n    return (\r\n      \"Below are the top ten paragraphs from the podcast data:\\n\\n\" +\r\n      responseData.join(\"\\n\\n\")\r\n    );\r\n  } catch (error) {\r\n    console.error(\"Error in Cosine function:\", error);\r\n    return {\r\n      error: \"An error occurred during similarity search.\",\r\n    };\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;IAgBsB"}},
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 277, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Prana/prana_client/src/app/components/Main.jsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { VoiceProvider } from \"@humeai/voice-react\";\r\nimport { Call } from \"./Call\";\r\nimport Messages from \"./Message\";\r\nimport { Cosine } from \"../Cosine\";\r\n\r\nexport default function ClientComponent({ accessToken }) {\r\n  return (\r\n    <VoiceProvider\r\n      configId={process.env.NEXT_PUBLIC_HUME_CONFIG_ID}\r\n      auth={{ type: \"accessToken\", value: accessToken }}\r\n      onToolCall={handleToolCall}\r\n    >\r\n      <div className=\"w-[100lvw-2rem] flex flex-col justify-between min-h-[85lvh] m-4\">\r\n        <Messages />\r\n        <Call />\r\n      </div>\r\n    </VoiceProvider>\r\n  );\r\n}\r\n\r\nconst handleToolCall = async (message, socket) => {\r\n  console.log(\"handleToolCall called with message:\", message);\r\n  if (message.name === \"retrieve_data\") {\r\n    try {\r\n      const { query } = JSON.parse(message.parameters);\r\n      console.log(\"Parsed query:\", query);\r\n\r\n      const data = await Cosine({ userText: query });\r\n      console.log(\"Cosine function returned data:\", data);\r\n\r\n      const toolResponseMessage = {\r\n        type: \"tool_response\",\r\n        toolCallId: message.toolCallId,\r\n        content: data,\r\n      };\r\n      console.log(\"Tool response message:\", toolResponseMessage);\r\n\r\n      return socket.success(toolResponseMessage);\r\n    } catch (error) {\r\n      console.error(\"Error in handleToolCall:\", error);\r\n      return socket.error({\r\n        error: \"Embeddings retrieval error\",\r\n        code: 400,\r\n      });\r\n    }\r\n  }\r\n\r\n  console.log(\"Tool not found for message:\", message);\r\n  return socket.error({\r\n    error: \"Tool not found\",\r\n    code: 401,\r\n  });\r\n};"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AALA;;;;;;AAOe,SAAS,gBAAgB,EAAE,WAAW,EAAE;IACrD,qBACE,8OAAC,4JAAA,CAAA,gBAAa;QACZ,QAAQ;QACR,MAAM;YAAE,MAAM;YAAe,OAAO;QAAY;QAChD,YAAY;kBAEZ,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC,oIAAA,CAAA,UAAQ;;;;;8BACT,8OAAC,iIAAA,CAAA,OAAI;;;;;;;;;;;;;;;;AAIb;AAEA,MAAM,iBAAiB,OAAO,SAAS;IACrC,QAAQ,GAAG,CAAC,uCAAuC;IACnD,IAAI,QAAQ,IAAI,KAAK,iBAAiB;QACpC,IAAI;YACF,MAAM,EAAE,KAAK,EAAE,GAAG,KAAK,KAAK,CAAC,QAAQ,UAAU;YAC/C,QAAQ,GAAG,CAAC,iBAAiB;YAE7B,MAAM,OAAO,MAAM,CAAA,GAAA,oHAAA,CAAA,SAAM,AAAD,EAAE;gBAAE,UAAU;YAAM;YAC5C,QAAQ,GAAG,CAAC,kCAAkC;YAE9C,MAAM,sBAAsB;gBAC1B,MAAM;gBACN,YAAY,QAAQ,UAAU;gBAC9B,SAAS;YACX;YACA,QAAQ,GAAG,CAAC,0BAA0B;YAEtC,OAAO,OAAO,OAAO,CAAC;QACxB,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,4BAA4B;YAC1C,OAAO,OAAO,KAAK,CAAC;gBAClB,OAAO;gBACP,MAAM;YACR;QACF;IACF;IAEA,QAAQ,GAAG,CAAC,+BAA+B;IAC3C,OAAO,OAAO,KAAK,CAAC;QAClB,OAAO;QACP,MAAM;IACR;AACF"}},
    {"offset": {"line": 355, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}