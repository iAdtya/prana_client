{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Prana/prana_client/src/app/components/Main.jsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/components/Main.jsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/components/Main.jsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA+R,GAC5T,6DACA"}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Prana/prana_client/src/app/components/Main.jsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/components/Main.jsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/components/Main.jsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA2Q,GACxS,yCACA"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 149, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Prana/prana_client/src/app/page.js"],"sourcesContent":["import ClientComponent from \"./components/Main\";\r\nimport { fetchAccessToken } from \"hume\";\r\n\r\nconst HUME_SECRET_KEY = process.env.HUME_SECRET_KEY;\r\nconst HUME_API_KEY = process.env.HUME_API_KEY;\r\n\r\nexport default async function Page() {\r\n\tconst accessToken = await fetchAccessToken({\r\n\t\tapiKey: HUME_API_KEY,\r\n\t\tsecretKey: HUME_SECRET_KEY,\r\n\t});\r\n\r\n\treturn <ClientComponent accessToken={accessToken} />;\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAEA,MAAM,kBAAkB,QAAQ,GAAG,CAAC,eAAe;AACnD,MAAM,eAAe,QAAQ,GAAG,CAAC,YAAY;AAE9B,eAAe;IAC7B,MAAM,cAAc,MAAM,CAAA,GAAA,6HAAA,CAAA,mBAAgB,AAAD,EAAE;QAC1C,QAAQ;QACR,WAAW;IACZ;IAEA,qBAAO,8OAAC,iIAAA,CAAA,UAAe;QAAC,aAAa;;;;;;AACtC"}},
    {"offset": {"line": 173, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 313, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Prana/prana_client/src/app/UploadFile.js"],"sourcesContent":["\"use server\";\r\n\r\nimport { promises as fs } from \"fs\";\r\nimport path from \"path\";\r\nimport { UnstructuredDirectoryLoader } from \"@langchain/community/document_loaders/fs/unstructured\";\r\nimport { UnstructuredClient } from \"unstructured-client\";\r\nimport { Strategy } from \"unstructured-client/sdk/models/shared/index.js\";\r\n\r\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\r\nimport OpenAI from \"openai\";\r\n\r\nconst collectionName = \"test\";\r\nconst VECTOR_SIZE = 3072;\r\n\r\nconst openai = new OpenAI({\r\n  apiKey: process.env.OPENAI_API_KEY,\r\n});\r\n\r\nconst client = new QdrantClient({\r\n  url: process.env.QDRANT_URL,\r\n  apiKey: process.env.QDRANT_API_KEY,\r\n});\r\n\r\nconst unstructuredClient = new UnstructuredClient({\r\n  security: {\r\n    apiKeyAuth: \"wTxT2zckazTCIfDhL3fS05CUMQphRH\",\r\n  },\r\n});\r\n\r\nasync function ensureCollectionExists() {\r\n  try {\r\n    const collections = await client.getCollections();\r\n    const collectionExists = collections.collections.some(\r\n      (collection) => collection.name === collectionName\r\n    );\r\n\r\n    if (!collectionExists) {\r\n      await client.createCollection(collectionName, {\r\n        vectors: {\r\n          size: VECTOR_SIZE,\r\n          distance: \"Cosine\",\r\n        },\r\n      });\r\n      console.log(`Collection ${collectionName} created successfully`);\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error ensuring collection exists:\", error);\r\n    throw new Error(\"Failed to setup Qdrant collection\");\r\n  }\r\n}\r\n\r\nexport async function uploadFile(file) {\r\n  try {\r\n    await ensureCollectionExists();\r\n\r\n    const uploadDir = path.join(process.cwd(), \"src\", \"app\", \"uploads\");\r\n    await fs.mkdir(uploadDir, { recursive: true });\r\n\r\n    const filePath = path.join(uploadDir, file.name);\r\n    await fs.writeFile(filePath, Buffer.from(await file.arrayBuffer()));\r\n\r\n    const fileData = await fs.readFile(filePath);\r\n\r\n    const response = await unstructuredClient.general.partition({\r\n      partitionParameters: {\r\n        files: {\r\n          content: fileData,\r\n          fileName: file.name,\r\n        },\r\n        strategy: Strategy.Auto,\r\n      },\r\n    });\r\n\r\n    if (response.statusCode !== 200) {\r\n      throw new Error(`Failed to process document: ${response.statusCode}`);\r\n    }\r\n\r\n    const points = [];\r\n\r\n    for (const element of response.elements) {\r\n      try {\r\n        const embeddingResponse = await openai.embeddings.create({\r\n          model: \"text-embedding-3-large\",\r\n          input: element.text,\r\n        });\r\n\r\n        const embedding = embeddingResponse.data[0].embedding;\r\n\r\n        if (embedding.length !== VECTOR_SIZE) {\r\n          console.error(`Invalid embedding size: ${embedding.length}`);\r\n          continue;\r\n        }\r\n\r\n        points.push({\r\n          id: crypto.randomUUID(),\r\n          vector: embedding,\r\n          payload: {\r\n            content: element.text,\r\n            metadata: {\r\n              type: element.type,\r\n              fileName: file.name,\r\n            },\r\n          },\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Error creating embedding:\", error);\r\n      }\r\n    }\r\n\r\n    if (points.length > 0) {\r\n      await client.upsert(collectionName, {\r\n        wait: true,\r\n        points: points,\r\n      });\r\n      console.log(`Successfully upserted ${points.length} points`);\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      filePath,\r\n      message: `Successfully processed ${points.length} elements`,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error in uploadFile:\", error);\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n    };\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 441, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 447, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Prana/prana_client/src/app/Cosine.js"],"sourcesContent":["\"use server\";\r\n\r\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\r\nimport OpenAI from \"openai\";\r\n\r\nconst collection = \"test\";\r\n\r\nconst openai = new OpenAI({\r\n  apiKey: process.env.OPENAI_API_KEY,\r\n});\r\n\r\nconst client = new QdrantClient({\r\n  url: process.env.QDRANT_URL,\r\n  apiKey: process.env.QDRANT_API_KEY,\r\n});\r\n\r\nexport async function Cosine(data) {\r\n  console.log(\"Cosine function called with data:\", data);\r\n  try {\r\n    const { userText } = data;\r\n    console.log(\"User text:\", userText);\r\n\r\n    const embeddingResponse = await openai.embeddings.create({\r\n      model: \"text-embedding-3-large\",\r\n      input: userText,\r\n    });\r\n    console.log(\"Embedding response:\", embeddingResponse);\r\n\r\n    const queryEmbedding = embeddingResponse.data[0].embedding;\r\n    console.log(\"Query embedding:\", queryEmbedding);\r\n\r\n    // Perform similarity search using Qdrant\r\n    const results = await client.search(collection, {\r\n      vector: queryEmbedding,\r\n      limit: 3,\r\n    });\r\n    console.log(\"Search results:\", results);\r\n\r\n    const responseData = results.map(\r\n      (obj, i) => `${(i + 1).toString()}. ${obj.payload.page_content}`\r\n    );\r\n    console.log(\"Response data:\", responseData);\r\n\r\n    return (\r\n      \"Below are the top ten paragraphs from the podcast data:\\n\\n\" +\r\n      responseData.join(\"\\n\\n\")\r\n    );\r\n  } catch (error) {\r\n    console.error(\"Error in Cosine function:\", error);\r\n    return {\r\n      error: \"An error occurred during similarity search.\",\r\n    };\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;AAGA;AADA;;;;;AAGA,MAAM,aAAa;AAEnB,MAAM,SAAS,IAAI,gJAAA,CAAA,UAAM,CAAC;IACxB,QAAQ,QAAQ,GAAG,CAAC,cAAc;AACpC;AAEA,MAAM,SAAS,IAAI,mLAAA,CAAA,eAAY,CAAC;IAC9B,KAAK,QAAQ,GAAG,CAAC,UAAU;IAC3B,QAAQ,QAAQ,GAAG,CAAC,cAAc;AACpC;AAEO,eAAe,OAAO,IAAI;IAC/B,QAAQ,GAAG,CAAC,qCAAqC;IACjD,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,GAAG;QACrB,QAAQ,GAAG,CAAC,cAAc;QAE1B,MAAM,oBAAoB,MAAM,OAAO,UAAU,CAAC,MAAM,CAAC;YACvD,OAAO;YACP,OAAO;QACT;QACA,QAAQ,GAAG,CAAC,uBAAuB;QAEnC,MAAM,iBAAiB,kBAAkB,IAAI,CAAC,EAAE,CAAC,SAAS;QAC1D,QAAQ,GAAG,CAAC,oBAAoB;QAEhC,yCAAyC;QACzC,MAAM,UAAU,MAAM,OAAO,MAAM,CAAC,YAAY;YAC9C,QAAQ;YACR,OAAO;QACT;QACA,QAAQ,GAAG,CAAC,mBAAmB;QAE/B,MAAM,eAAe,QAAQ,GAAG,CAC9B,CAAC,KAAK,IAAM,GAAG,CAAC,IAAI,CAAC,EAAE,QAAQ,GAAG,EAAE,EAAE,IAAI,OAAO,CAAC,YAAY,EAAE;QAElE,QAAQ,GAAG,CAAC,kBAAkB;QAE9B,OACE,gEACA,aAAa,IAAI,CAAC;IAEtB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO;YACL,OAAO;QACT;IACF;AACF;;;IArCsB;;AAAA,+OAAA"}},
    {"offset": {"line": 500, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 506, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 509, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}